-- MySQL Script generated by MySQL Workbench
-- Wed Jul 31 10:34:41 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema questionnaireDB2019
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema questionnaireDB2019
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `questionnaireDB2019` DEFAULT CHARACTER SET utf8 ;
USE `questionnaireDB2019` ;

-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`definitionTable`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`definitionTable` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`dictionary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`dictionary` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `tableId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `contentId` BIGINT NOT NULL,
  `content` MEDIUMTEXT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_dictionary_contentId` (`contentId` ASC)  ,
  INDEX `idx_dictionary_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_dictionary_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dictionary_tableId_definitionTable_ID`
    FOREIGN KEY (`tableId`)
    REFERENCES `questionnaireDB2019`.`definitionTable` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`language` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `isoLang` VARCHAR(2) NOT NULL,
  `name` BIGINT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_language_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_language_name_dictionary_ID`
    FOREIGN KEY (`name`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`type` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `description` BIGINT NOT NULL,
  `tableId` BIGINT NOT NULL,
  `subTableId` BIGINT NOT NULL,
  `templateTableId` BIGINT NOT NULL,
  `templateSubTableId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_type_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_tableId_definitionTable_ID`
    FOREIGN KEY (`tableId`)
    REFERENCES `questionnaireDB2019`.`definitionTable` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_subTableId_definitionTable_ID`
    FOREIGN KEY (`subTableId`)
    REFERENCES `questionnaireDB2019`.`definitionTable` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_templateTableId_definitionTable_ID`
    FOREIGN KEY (`templateTableId`)
    REFERENCES `questionnaireDB2019`.`definitionTable` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_templateSubTableId_definitionTable_ID`
    FOREIGN KEY (`templateSubTableId`)
    REFERENCES `questionnaireDB2019`.`definitionTable` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`legacyType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`legacyType` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `legacyName` VARCHAR(255) NOT NULL,
  `legacyTableName` VARCHAR(255) NOT NULL,
  `typeId` BIGINT NOT NULL,
  `default` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_legacyType_typeId_type_ID`
    FOREIGN KEY (`typeId`)
    REFERENCES `questionnaireDB2019`.`type` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table is a direct replication from the legacy table QuestionType in questionnaireDB. It is required for the time of the migration. When the migration will be over and the triggers will stop, this table needs to be deleted.';


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`question` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `OAUserId` BIGINT NOT NULL DEFAULT -1,
  `display` BIGINT NOT NULL,
  `definition` BIGINT NOT NULL,
  `question` BIGINT NOT NULL,
  `typeId` BIGINT NOT NULL,
  `version` INT NOT NULL DEFAULT 1,
  `parentId` BIGINT NOT NULL DEFAULT -1,
  `polarity` TINYINT NOT NULL DEFAULT 0 COMMENT '0 = lowGood (the lower the score, the better the answer), 1 = highGood (the higher the score, the better the answer)',
  `private` TINYINT NOT NULL DEFAULT 0,
  `final` TINYINT NOT NULL DEFAULT 0,
  `optionalFeedback` TINYINT NOT NULL DEFAULT 0,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  `legacyTypeId` BIGINT NOT NULL COMMENT 'This ID linked to the legacyTypes table must be removed once the migration of the legacy questionnaire will be done and the triggers stopped.',
  PRIMARY KEY (`ID`),
  INDEX `idx_question_deleted` (`deleted` ASC)  ,
  INDEX `idx_question_OAUserId` (`OAUserId` ASC)  ,
  INDEX `idx_question_parentId` (`parentId` ASC)  ,
  CONSTRAINT `fk_question_typeId_type_ID`
    FOREIGN KEY (`typeId`)
    REFERENCES `questionnaireDB2019`.`type` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_question_question_dictionary_contentId`
    FOREIGN KEY (`question`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_question_display_dictionary_contentId`
    FOREIGN KEY (`display`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_question_definition_dictionary_contentId`
    FOREIGN KEY (`definition`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_question_legacyTypeId_legacyType`
    FOREIGN KEY (`legacyTypeId`)
    REFERENCES `questionnaireDB2019`.`legacyType` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionnaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionnaire` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `OAUserId` BIGINT NOT NULL DEFAULT -1,
  `title` BIGINT NOT NULL,
  `nickname` BIGINT NOT NULL,
  `category` INT NOT NULL DEFAULT -1,
  `description` BIGINT NOT NULL,
  `instruction` BIGINT NOT NULL,
  `final` TINYINT NOT NULL DEFAULT 0,
  `version` INT NOT NULL DEFAULT 1,
  `parentId` BIGINT NOT NULL DEFAULT -1,
  `private` TINYINT NOT NULL DEFAULT 0,
  `optionalFeedback` TINYINT NOT NULL DEFAULT 1,
  `logo` VARCHAR(512) NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  `legacyName` VARCHAR(255) NOT NULL COMMENT 'This field is mandatory to make the app works during the migration process. This field must be removed once the migration of the legacy questionnaire will be done, the triggers stopped and the app changed to use the correct standards.',
  PRIMARY KEY (`ID`),
  INDEX `idx_questionnaire_deleted` (`deleted` ASC)  ,
  INDEX `idx_questionnaire_OAUserId` (`OAUserId` ASC)  ,
  INDEX `idx_questionnaire_parentId` (`parentId` ASC)  ,
  CONSTRAINT `fk_questionnaire_title_dictionary_contentId`
    FOREIGN KEY (`title`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionnaire_nickname_dictionary_contentId`
    FOREIGN KEY (`nickname`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionnaire_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionnaire_instructions_dictionary_contentId`
    FOREIGN KEY (`instruction`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`section` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionnaireId` BIGINT NOT NULL,
  `title` BIGINT NOT NULL,
  `instruction` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_section_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_section_questionnaireId_questrionnaire_ID`
    FOREIGN KEY (`questionnaireId`)
    REFERENCES `questionnaireDB2019`.`questionnaire` (`ID`),
  CONSTRAINT `fk_section_instruction_dictionary_contentId`
    FOREIGN KEY (`instruction`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_title_dictionary_contentId`
    FOREIGN KEY (`title`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionSection` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `sectionId` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  `orientation` INT NOT NULL DEFAULT 0 COMMENT '0 = Portrait, 1 = Landscape, 2 = Both',
  `optional` TINYINT NOT NULL DEFAULT 0 COMMENT '0 = false, 1 = true',
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_questionSection_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`),
  CONSTRAINT `fk_questionSection_sectionId_section_ID`
    FOREIGN KEY (`sectionId`)
    REFERENCES `questionnaireDB2019`.`section` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`patient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`patient` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `hospitalId` BIGINT NOT NULL,
  `externalId` VARCHAR(64) NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_patient_deleted` (`deleted` ASC)  ,
  INDEX `idx_patient_hospitalId` (`hospitalId` ASC)  ,
  INDEX `idx_patient_externalId` (`externalId` ASC)  )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionFeedback`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionFeedback` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `feedback` TEXT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_questionFeedback_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_questionFeedback_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`),
  CONSTRAINT `fk_questionFeedback_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionFeedback_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionnaireFeedback`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionnaireFeedback` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionnaireId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `feedback` TEXT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_questionnaireFeedback` (`deleted` ASC)  ,
  CONSTRAINT `fk_questionnaireFeedback_questionnaireId_questionnaire_ID`
    FOREIGN KEY (`questionnaireId`)
    REFERENCES `questionnaireDB2019`.`questionnaire` (`ID`),
  CONSTRAINT `fk_questionnaireFeedback_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionnaireFeedback_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`tag` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `tag` BIGINT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_tag_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_tag_tag_dictionary_contentId`
    FOREIGN KEY (`tag`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`tagQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`tagQuestion` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `tagId` BIGINT NOT NULL,
  `questionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tagQuestion_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`),
  CONSTRAINT `fk_tagQuestion_tagId_tag_ID`
    FOREIGN KEY (`tagId`)
    REFERENCES `questionnaireDB2019`.`tag` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`library`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`library` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `OAUserId` BIGINT NOT NULL DEFAULT -1,
  `name` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  `private` TINYINT NOT NULL DEFAULT 0,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_library_deleted` (`deleted` ASC)  ,
  INDEX `idx_library_OAUserId` (`OAUserId` ASC)  ,
  CONSTRAINT `fk_library_name_dictionary_ID`
    FOREIGN KEY (`name`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`tagLibrary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`tagLibrary` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `tagId` BIGINT NOT NULL,
  `libraryId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tagLibrary_tagId_tag_ID`
    FOREIGN KEY (`tagId`)
    REFERENCES `questionnaireDB2019`.`tag` (`ID`),
  CONSTRAINT `fk_tagLibrary_libraryId_library_ID`
    FOREIGN KEY (`libraryId`)
    REFERENCES `questionnaireDB2019`.`library` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`slider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`slider` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `minValue` FLOAT NOT NULL,
  `maxValue` FLOAT NOT NULL,
  `minCaption` BIGINT NOT NULL,
  `maxCaption` BIGINT NOT NULL,
  `increment` FLOAT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_slider_minCaption_dictionnary_contentId`
    FOREIGN KEY (`minCaption`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_slider_maxCaption_dictionnary_contentId`
    FOREIGN KEY (`maxCaption`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_slider_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`checkbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`checkbox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `minAnswer` INT NOT NULL DEFAULT 1,
  `maxAnswer` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_checkbox_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`textBox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`textBox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_textBox_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`radioButton`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`radioButton` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_radioButton_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`radioButtonOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`radioButtonOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_radioButtonOption_parentTableId_radioButton_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`radioButton` (`ID`),
  CONSTRAINT `fk_radioButtonOption_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`time`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`time` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_time_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`date`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`date` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_date_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`label`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`label` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `displayIntensity` TINYINT NOT NULL DEFAULT 0 COMMENT '0 = patient cannot select intensity, 1 = patient can select intensity',
  `pathImage` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_label_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`labelOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`labelOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `posInitX` INT NOT NULL DEFAULT 0,
  `posInitY` INT NOT NULL DEFAULT 0,
  `posFinalX` INT NOT NULL DEFAULT 0,
  `posFinalY` INT NOT NULL DEFAULT 0,
  `intensity` INT NOT NULL DEFAULT 0,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_labelOption_parentTableId_label_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`label` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_labelOption_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`libraryQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`libraryQuestion` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `libraryId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_libraryQuestion_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_libraryQuestion_libraryId_library_ID`
    FOREIGN KEY (`libraryId`)
    REFERENCES `questionnaireDB2019`.`library` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionnaireRating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionnaireRating` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionnaireId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `rating` INT NOT NULL DEFAULT 0,
  `comment` TEXT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_questionnaireRating_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_questionnaireRating_questionnaireId_questionnaire_ID`
    FOREIGN KEY (`questionnaireId`)
    REFERENCES `questionnaireDB2019`.`questionnaire` (`ID`),
  CONSTRAINT `fk_questionnaireRating_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionnaireRating_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`textBoxTrigger`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`textBoxTrigger` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_textBoxTrigger_parentTableId_textBox_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`textBox` (`ID`),
  CONSTRAINT `fk_textBoxTrigger_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerQuestionnaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerQuestionnaire` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionnaireId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `status` INT NOT NULL DEFAULT 0 COMMENT '0 = New, 1 = In Progress, 2 = Completed',
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_answerQuestionnaire_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_answerQuestionnaire_questionnaireId_questionnaire_ID`
    FOREIGN KEY (`questionnaireId`)
    REFERENCES `questionnaireDB2019`.`questionnaire` (`ID`),
  CONSTRAINT `fk_answerQuestionnaire_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerSection` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerQuestionnaireId` BIGINT NOT NULL,
  `sectionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerSection_answerQuestionnaire_ID`
    FOREIGN KEY (`answerQuestionnaireId`)
    REFERENCES `questionnaireDB2019`.`answerQuestionnaire` (`ID`),
  CONSTRAINT `fk_answerSection_section_ID`
    FOREIGN KEY (`sectionId`)
    REFERENCES `questionnaireDB2019`.`section` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answer` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionnaireId` BIGINT NOT NULL,
  `sectionId` BIGINT NOT NULL,
  `questionId` BIGINT NOT NULL,
  `typeId` BIGINT NOT NULL,
  `answerSectionId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `answered` TINYINT NOT NULL DEFAULT 0,
  `skipped` TINYINT NOT NULL DEFAULT 0,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_answer_deleted` (`deleted` ASC)  ,
  CONSTRAINT `fk_answer_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`),
  CONSTRAINT `fk_answer_sectionId_section_ID`
    FOREIGN KEY (`sectionId`)
    REFERENCES `questionnaireDB2019`.`section` (`ID`),
  CONSTRAINT `fk_answer_questionnaireId_questionnaire_ID`
    FOREIGN KEY (`questionnaireId`)
    REFERENCES `questionnaireDB2019`.`questionnaire` (`ID`),
  CONSTRAINT `fk_answer_answerSectionId_answerSection_ID`
    FOREIGN KEY (`answerSectionId`)
    REFERENCES `questionnaireDB2019`.`answerSection` (`ID`),
  CONSTRAINT `fk_answer_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_answer_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_answer_TypeId_type_ID`
    FOREIGN KEY (`typeId`)
    REFERENCES `questionnaireDB2019`.`type` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerSlider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerSlider` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` FLOAT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerSlider_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerTextBox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerTextBox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` TEXT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerTextBox_answerId_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerRadioButton`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerRadioButton` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerRadioButton_answerId_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`),
  CONSTRAINT `fk_¸answerRadioButton_value_radioButtonOption_ID`
    FOREIGN KEY (`value`)
    REFERENCES `questionnaireDB2019`.`radioButtonOption` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerTime`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerTime` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` TIME NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerTime_answerId_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerDate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerDate` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` DATETIME NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerDate_answerId_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`));


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerLabel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerLabel` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `selected` TINYINT NOT NULL DEFAULT 1,
  `posX` INT NOT NULL,
  `posY` INT NOT NULL,
  `intensity` INT NOT NULL,
  `value` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerLabel_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_answerLabel_labelOption_ID`
    FOREIGN KEY (`value`)
    REFERENCES `questionnaireDB2019`.`labelOption` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`checkboxOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`checkboxOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  `description` BIGINT NOT NULL,
  `specialAction` INT NOT NULL DEFAULT 0 COMMENT '0 = nothing special, 1 = check everything, 2 = uncheck everything',
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_checkboxOption_parentTableId_checkBox_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`checkbox` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_checkboxOption_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`answerCheckbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`answerCheckbox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `answerId` BIGINT NOT NULL,
  `value` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_answerCheckbox_answerId_answer_ID`
    FOREIGN KEY (`answerId`)
    REFERENCES `questionnaireDB2019`.`answer` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_answerCheckbox_value_checkboxOption_ID`
    FOREIGN KEY (`value`)
    REFERENCES `questionnaireDB2019`.`checkboxOption` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`questionRating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`questionRating` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `questionId` BIGINT NOT NULL,
  `languageId` BIGINT NOT NULL,
  `patientId` BIGINT NOT NULL,
  `rating` INT NOT NULL DEFAULT 0,
  `comment` TEXT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_questionRating_questionId_question_ID`
    FOREIGN KEY (`questionId`)
    REFERENCES `questionnaireDB2019`.`question` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionRating_patientId_patient_ID`
    FOREIGN KEY (`patientId`)
    REFERENCES `questionnaireDB2019`.`patient` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_questionRating_languageId_language_ID`
    FOREIGN KEY (`languageId`)
    REFERENCES `questionnaireDB2019`.`language` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestion` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `OAUserId` BIGINT NOT NULL DEFAULT -1,
  `name` BIGINT NOT NULL,
  `typeId` BIGINT NOT NULL,
  `version` INT NOT NULL,
  `parentId` BIGINT NOT NULL DEFAULT -1,
  `polarity` TINYINT NOT NULL DEFAULT 0,
  `private` TINYINT NOT NULL DEFAULT 0,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deletedBy` VARCHAR(255) NOT NULL,
  `creationDate` DATETIME NOT NULL,
  `createdBy` VARCHAR(255) NOT NULL,
  `lastUpdated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updatedBy` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `idx_templateQuestion_deleted` (`deleted` ASC)  ,
  INDEX `idx_templateQuestion_OAUserId` (`OAUserId` ASC)  ,
  INDEX `idx_templateQuestion_parentId` (`parentId` ASC)  ,
  CONSTRAINT `fk_templateQuestion_name_dictionary_contentId`
    FOREIGN KEY (`name`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_templateQuestionId_typeId_type_ID`
    FOREIGN KEY (`typeId`)
    REFERENCES `questionnaireDB2019`.`type` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionTime`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionTime` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqt_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionDate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionDate` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqd_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionCheckbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionCheckbox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  `minAnswer` INT NOT NULL DEFAULT 0,
  `maxAnswer` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqc_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionCheckboxOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionCheckboxOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  `specialAction` INT NOT NULL COMMENT '0 = nothing special, 1 = check everything, 2 = uncheck everything',
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqco_parentTableId_templateQuestionCheckbox_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`templateQuestionCheckbox` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqco_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionLabel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionLabel` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  `displayIntensity` INT NOT NULL DEFAULT 0,
  `pathImage` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tql_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionRadioButton`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionRadioButton` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqrb_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionTextBox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionTextBox` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqtb_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionTextBoxTrigger`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionTextBoxTrigger` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqtt_parentTableId_templateQuestionTextBox_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`templateQuestionTextBox` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqtt_description_dictionnary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionSlider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionSlider` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `templateQuestionId` BIGINT NOT NULL,
  `minValue` FLOAT NOT NULL,
  `maxValue` FLOAT NOT NULL,
  `minCaption` BIGINT NOT NULL,
  `maxCaption` BIGINT NOT NULL,
  `increment` FLOAT NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqs_templateQuestionId_templateQuestion_ID`
    FOREIGN KEY (`templateQuestionId`)
    REFERENCES `questionnaireDB2019`.`templateQuestion` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqs_minContent_dictionary_contentId`
    FOREIGN KEY (`minCaption`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqs_maxContent_dictionary_contentId`
    FOREIGN KEY (`maxCaption`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionLabelOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionLabelOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `posInitX` INT NOT NULL DEFAULT 0,
  `posInitY` INT NOT NULL DEFAULT 0,
  `posFinalX` INT NOT NULL DEFAULT 0,
  `posFinalY` INT NOT NULL DEFAULT 0,
  `intensity` INT NOT NULL DEFAULT 0,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqlo_parentTableId_templateQuestionLabel_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`templateQuestionLabel` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqlo_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `questionnaireDB2019`.`templateQuestionRadioButtonOption`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questionnaireDB2019`.`templateQuestionRadioButtonOption` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT,
  `parentTableId` BIGINT NOT NULL,
  `description` BIGINT NOT NULL,
  `order` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_tqrbo_parentTableId_templateQuestionRadioButton_ID`
    FOREIGN KEY (`parentTableId`)
    REFERENCES `questionnaireDB2019`.`templateQuestionRadioButton` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tqrbo_description_dictionary_contentId`
    FOREIGN KEY (`description`)
    REFERENCES `questionnaireDB2019`.`dictionary` (`contentId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `questionnaireDB2019` ;

-- -----------------------------------------------------
-- function getAnswerTableOptionID
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `getAnswerTableOptionID`(
`i_questionID` BIGINT,
`i_content` VARCHAR(255
),
`i_answerTypeID` BIGINT

) RETURNS bigint(20)
    DETERMINISTIC
BEGIN

-- Declare variables
Declare wsReturn, wsCount int;
Declare wsQuestionID, wsAnswerTypeID bigint;
Declare wsContent varchar(255);

-- Store the parameters
set wsReturn = -1;
Set wsContent = i_content;
Set wsAnswerTypeID = i_answerTypeID;
Set wsQuestionID = i_questionID;

-- Answer Type ID : 1 = Checkbox, 4 = Radiobutton, 5 = Label
-- The answer types can be found in table "Type"
-- NOTE: Currently we don't have any Label for now
if (wsAnswerTypeID = 1) then 
set wsReturn = (SELECT cbOpt.ID 
FROM checkbox cb, checkboxOption cbOpt
WHERE cb.questionId = i_questionID
AND cb.ID = cbOpt.parentTableId
AND cbOpt.description IN (
SELECT contentId
FROM dictionary
WHERE content = i_content
AND deleted <> 1 
AND tableId IN (12, 17, 31) -- where 12, 17, 31 are checkboxOption, labelOption, radioButtonOption tables resp., you can check in definitionTable
)
LIMIT 1
);
end if;
if (wsAnswerTypeID = 4) then 
set wsReturn = (SELECT rbOpt.ID  
FROM radioButton rb, radioButtonOption rbOpt
WHERE rb.questionId = i_questionID
AND rbOpt.parentTableId = rb.ID
AND rbOpt.description IN (
SELECT contentId
FROM dictionary
WHERE content = i_content
AND deleted <> 1 
AND tableId IN (12, 17, 31) -- where 12, 17, 31 are checkboxOption, labelOption, radioButtonOption tables resp., you can check in definitionTable
)
LIMIT 1
);
end if;

set wsReturn = ifnull(wsReturn, -1);
return wsReturn;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getDisplayName
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `getDisplayName`(
	`i_ContentID` BIGINT,
	`i_LanguageID` BIGINT


) RETURNS mediumtext CHARSET utf8
    DETERMINISTIC
BEGIN
-- Declare variables
	Declare wsText, wsReturnText, wsReturn MEDIUMTEXT;
	Declare wsCount int;

	-- Store the parameters
	set wsText = '';
	set wsCount = 0;
	
	-- Get the translation
	Select count(*), content 
	into wsCount, wsReturnText
	from dictionary 
	where contentId = i_ContentID and languageId = i_LanguageID;
	
  -- if no record found then return empty
  -- otherwise return the translation text
  	if (wsCount = 0) then
		set wsReturn = wsText;
	else
		set wsReturn = wsReturnText;
	end if;
	
	Return wsReturn;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure queryAnswers
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `queryAnswers`(
	IN `i_answerQuestionnaireId` TEXT,
	IN `i_languageId` BIGINT


)
    DETERMINISTIC
BEGIN

/*
Parameter: i_answerQuestionnaireID: the list of answerQuestionnaireID for which to get answer for
				i_languageId: the language that the answers are going to be displayed in case the answers have languageId = -1 in the database
Produce the list of answers values translated
*/

set @wsSQL = concat("
select aSec.answerQuestionnaireId AS QuestionnaireSerNum, 
	qSec.ID AS QuestionnaireQuestionSerNum, 
	B.value
from answerSection aSec, 
	questionSection qSec, 
	(Select A.questionId, A.sectionId, A.answerSectionId,

	(SELECT CONVERT(answerTextBox.VALUE, CHAR(516)) 
	FROM answerTextBox
	WHERE answerTextBox.answerId = A.ID
	UNION 
	SELECT CONVERT(answerSlider.VALUE, CHAR(516))
	FROM answerSlider
	WHERE answerSlider.answerId = A.ID
	UNION 
	SELECT CONVERT(answerDate.VALUE, CHAR(516))
	FROM answerDate
	WHERE answerDate.answerId = A.ID
	UNION 
	SELECT CONVERT(answerTime.VALUE, CHAR(516))
	FROM answerTime
	WHERE answerTime.answerId = A.ID
	UNION 
	SELECT CONVERT(getDisplayName(rbOpt.description, if(A.languageId < 0,", i_languageId, ", A.languageId)), CHAR(516)) 
	FROM answerRadioButton aRB, radioButtonOption rbOpt
	WHERE aRB.answerId = A.ID
		AND rbOpt.ID = aRB.`value`) AS value
from answer A
where A.deleted <> 1
UNION
Select A.questionId, A.sectionId, A.answerSectionId, CONVERT(getDisplayName(cOpt.description, if(A.languageId < 0,", i_languageId, ", A.languageId) ), CHAR(516)) AS value
from answer A, answerCheckbox aC, checkboxOption cOpt
where A.deleted <> 1
	and aC.answerId = A.ID
		AND cOpt.ID = aC.`value`
UNION
Select A.questionId, A.sectionId, A.answerSectionId,CONVERT(getDisplayName(lOpt.description, if(A.languageId < 0,", i_languageId, ", A.languageId)), CHAR(516)) AS value
from answer A, answerLabel aL, labelOption lOpt
where A.deleted <> 1
	and aL.answerId = A.ID
		AND lOpt.ID = aL.`value`) B
Where
	qSec.questionId = B.questionId
	and qSec.sectionId = B.sectionId
	and B.answerSectionId = aSec.ID
	and aSec.answerQuestionnaireId IN (", i_answerQuestionnaireId, ");");

Prepare stmt from @wsSQL;
Execute stmt;

deallocate prepare stmt;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure queryPatientQuestionnaireInfo
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `queryPatientQuestionnaireInfo`(
	IN `i_externalId` BIGINT


)
BEGIN

/*
Produce the list of Questionnaires
*/

SELECT IF(`status` <> 2, 0, 1) AS CompletedFlag,
    creationDate AS DateAdded,
    IF(`status` <> 2, NULL, lastUpdated) AS CompletionDate,
    ID AS QuestionnaireSerNum,
    questionnaireId AS QuestionnaireDBSerNum
FROM answerQuestionnaire
WHERE deleted <> 1
AND patientId IN (
    SELECT ID
FROM patient
WHERE externalId = i_externalId
AND deleted <> 1
)
;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure queryQuestionChoices
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `queryQuestionChoices`(
	IN `i_questionID` TEXT

)
    DETERMINISTIC
BEGIN

/*
Parameter: i_questionID: the list of questions' ID to get the options for
Produce the list of choices/options
*/

if (length(trim(i_questionID)) = 0) then
	set i_questionID = '-1';
end if;


set @wsSQL = concat("
SELECT rb.questionId AS QuestionSerNum,
	rbOpt.`order` AS OrderNum,
	getDisplayName(rbOpt.description, 2) AS ChoiceDescription_EN,
	getDisplayName(rbOpt.description, 1) AS ChoiceDescription_FR
FROM radioButton rb, radioButtonOption rbOpt
WHERE rb.Id = rbOpt.parentTableId
	AND rb.questionId IN (", i_questionID, ")
UNION ALL 
SELECT c.questionId,
	cOpt.`order`,
	getDisplayName(cOpt.description, 2) AS ChoiceDescription_EN,
	getDisplayName(cOpt.description, 1) AS ChoiceDescription_FR
FROM checkbox c, checkboxOption cOpt
WHERE c.ID = cOpt.parentTableId
	AND c.questionId IN (", i_questionID, ")
UNION ALL 
SELECT slider.questionId,
	slider.minValue - 1 AS OrderNum,
	getDisplayName(slider.minCaption, 2) AS ChoiceDescription_EN,
	getDisplayName(slider.minCaption, 1) AS ChoiceDescription_FR
FROM slider
WHERE slider.questionId IN (", i_questionID, ")
UNION ALL 
SELECT slider.questionId,
	slider.`maxValue` AS OrderNum,
	getDisplayName(slider.maxCaption, 2) AS ChoiceDescription_EN,
	getDisplayName(slider.maxCaption, 1) AS ChoiceDescription_FR
FROM slider
WHERE slider.questionId IN (", i_questionID, ")
UNION ALL 
SELECT l.questionId,
	lOpt.`order`,
	getDisplayName(lOpt.description, 2) AS ChoiceDescription_EN,
	getDisplayName(lOpt.description, 1) AS ChoiceDescription_FR
FROM label l, labelOption lOpt
WHERE l.ID = lOpt.parentTableId
	AND l.questionId IN (", i_questionID, ")
ORDER BY QuestionSerNum, OrderNum DESC;");


prepare stmt from @wsSQL;

Execute stmt;
deallocate prepare stmt;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure queryQuestions
-- -----------------------------------------------------

DELIMITER $$
USE `questionnaireDB2019`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `queryQuestions`(
	IN `i_questionnaireID` TEXT


)
    DETERMINISTIC
BEGIN

/*
parameter: list of Questionnaires ID
produce the list of questions in that questionnaire
*/

if (length(trim(i_questionnaireID)) = 0) then
	set i_questionnaireID = '-1';
end if;


set @wsSQL = concat("
SELECT questionnaire.ID AS QuestionnaireDBSerNum,
	questionnaire.legacyName AS QuestionnaireName,
	IF (questionnaire.nickname <> -1, getDisplayName(questionnaire.nickname,2), getDisplayName(questionnaire.title,2)) AS QuestionnaireName_EN,
	IF (questionnaire.nickname <> -1, getDisplayName(questionnaire.nickname,1), getDisplayName(questionnaire.title,1)) AS QuestionnaireName_FR,
	getDisplayName(questionnaire.description,2) AS Intro_EN,
	getDisplayName(questionnaire.description,1) AS Intro_FR,
	sec.ID AS sectionId,
	sec.`order` AS secOrder,
	qSec.ID AS QuestionnaireQuestionSerNum,
	qSec.questionId AS QuestionSerNum,
	q.polarity AS isPositiveQuestion,
	getDisplayName(q.question,2) AS QuestionText_EN,
	getDisplayName(q.question,1) AS QuestionText_FR,
	getDisplayName(display, 2) AS Asseses_EN,
	getDisplayName(display, 1) AS Asseses_FR,
	legacyType.legacyName AS QuestionType,
	q.legacyTypeId AS QuestionTypeSerNum,
	qSec.`order` AS qOrder
FROM questionnaire
	LEFT JOIN section sec ON (sec.questionnaireId = questionnaire.ID)
	LEFT JOIN questionSection qSec ON (qSec.sectionId = sec.ID)
	LEFT JOIN question q ON (qSec.questionId = q.ID)
	LEFT JOIN legacyType ON (q.legacyTypeId = legacyType.ID)
WHERE questionnaire.ID IN (", i_questionnaireID,")
	AND questionnaire.deleted <> 1
	AND sec.deleted <> 1
	AND q.deleted <> 1;");

prepare stmt from @wsSQL;

Execute stmt;
deallocate prepare stmt;

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
